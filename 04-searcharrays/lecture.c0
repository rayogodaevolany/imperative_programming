#use <util>

bool is_in(int x, int[] A, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= \length(A);
{
    for (int i = lo; i < hi; i++)
    //@loop_invariant lo <= i && i <= hi;
    {
        if (A[i] == x) return true;
    }
    return false;
}


bool is_sorted(int[] A, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= \length(A);
{
    for(int i = lo; i < hi - 1; i++)
    //@loop_invariant lo <= i;
    {
        if(!(A[i] <= A[i + 1])) return false; 
    }
    return true;
}

// search in a sorted(asc) array (length n) for x
// return index of element or -1 if none found
int search(int x, int [] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (\result == -1 && !is_in(x, A, 0, n)) ||
  ((0 <= \result && \result <= n) && A[\result] == x );
 @*/
{
    for (int i = 0; i < n; i++)
    //@loop_invariant 0 <= i && i <= n;
    //@loop_invariant i == 0 || A[i - 1] < x;
    {
        if (A[i] == x) return i;
        else if (A[i] > x) return -1;
        //@assert A[i] < x;
    }
    return -1;
}

