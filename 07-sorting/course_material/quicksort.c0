/*
 * Divide and conquer sort
 *
 * 15-122 Principles of Imperative Computation: Quicksort
 */


int partition(int[] A, int lo, int hi)
//@requires 0 <= lo && lo < hi && hi <= \length(A);
//@ensures lo <= \result && \result < hi;
//@ensures ge_seg(A[\result], A, lo, \result);
//@ensures le_seg(A[\result], A, \result+1, hi);
{
  int pi = lo + (hi - lo)/2;
  int pivot = A[pi];
  swap(A, pi, lo);
  int left = lo + 1;
  int right = hi;

  while (left < right)
  //@loop_invariant lo+1 <= left && left <= right && right <= hi;
  //@loop_invariant ge_seg(pivot, A, lo, left);
  //@loop_invariant le_seg(pivot, A, right, hi);
  //@loop_invariant pivot == A[lo];
  {
    if (A[left] <= pivot) {
      left++;
    } else {
      //@assert A[left] > pivot;
      swap(A, left, right-1);
      right--;
    }
  }

  //@assert left == right;
  swap(A, lo, left-1);
  return left-1;
}


// quicksort
void sort(int[] A, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= \length(A);
//@ensures is_sorted(A, lo, hi);
{
  if (hi - lo <= 1)               //@assert is_sorted(A, lo, hi);
    return;

  int p = partition(A, lo, hi);   //@assert lo <= p && p < hi;
  //@assert ge_seg(A[p], A,lo,p) && le_seg(A[p], A,p+1,hi);
  sort(A, lo, p);                 //@assert is_sorted(A, lo, p);
  sort(A, p+1, hi);               //@assert is_sorted(A, p+1, hi);
  //@assert is_sorted(A, lo, hi);
}
